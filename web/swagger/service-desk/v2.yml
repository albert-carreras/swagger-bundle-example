swagger: '2.0'
info:
  title: 'Service Desk API'
  version: 2.0.0
  description: |
    Fictional Service Desk API
basePath: /service-desk/v2
produces:
  - application/vnd.api+json
consumes:
  - application/vnd.api+json
securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization
    in: header
responses:
  TicketSearchResult:
    description: 'Search results'
    schema:
      $ref: '#/definitions/TicketSearchResult'
  TicketResponse:
    description: 'Ticket response'
    schema:
      $ref: '#/definitions/TicketResponse'
  ServerError:
    description: 'Server Error'
    schema:
      $ref: '#/definitions/JsonApiError'
  EntityNotFoundError:
    description: 'Entity Not Found'
    schema:
      $ref: '#/definitions/JsonApiError'
  InputError:
    description: 'Input Error'
    schema:
      $ref: '#/definitions/JsonApiError'
  UnauthorizedError:
    description: 'Unauthorized Error'
    schema:
      $ref: '#/definitions/JsonApiError'
paths:
  /ticket:
    get:
      operationId: 'swagger.controller.v2.ticket:search'
      summary: 'Search for tickets'
      security:
        - api_key: []
      parameters:
        - in: query
          name: status
          type: string
          enum: ['open', 'in-progress', 'closed']
        - in: query
          name: title
          type: string
        - in: query
          name: description
          type: string
        - in: query
          name: type
          type: string
          enum: ['question', 'incident', 'service-request', 'bug-report']
        - in: query
          name: priority
          type: string
          enum: ['high', 'normal', 'low']
      responses:
        200:
          $ref: '#/responses/TicketSearchResult'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/ServerError'
    post:
      operationId: 'swagger.controller.v2.ticket:post'
      summary: 'Create a ticket'
      description: "Create a new ticket"
      security:
        - api_key: []
      parameters:
        - in: body
          name: ticketRequest
          required: true
          schema:
            $ref: '#/definitions/TicketCreationRequest'
      responses:
        200:
          $ref: '#/responses/TicketResponse'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/ServerError'
  '/ticket/{id}':
    get:
      operationId: 'swagger.controller.v2.ticket:get'
      summary: 'Get a ticket'
      description: "Get ticket by id"
      security:
        - api_key: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          $ref: '#/responses/TicketResponse'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/EntityNotFoundError'
        500:
          $ref: '#/responses/ServerError'
    put:
      operationId: 'swagger.controller.v2.ticket:put'
      summary: 'Replace a ticket'
      security:
        - api_key: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
        - in: body
          name: ticketRequest
          required: true
          schema:
            $ref: '#/definitions/TicketReplaceRequest'
      responses:
        200:
          $ref: '#/responses/TicketResponse'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/EntityNotFoundError'
        500:
          $ref: '#/responses/ServerError'
    patch:
      operationId: 'swagger.controller.v2.ticket:patch'
      summary: 'Update a ticket'
      security:
        - api_key: []
      parameters:
        - in: path
          name: id
          required: true
          type: integer
        - in: body
          name: ticketRequest
          required: true
          schema:
            $ref: '#/definitions/TicketUpdateRequest'
      responses:
        200:
          $ref: '#/responses/TicketResponse'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/EntityNotFoundError'
        500:
          $ref: '#/responses/ServerError'
  '/ticket/findByTicketNumber/{ticketNumber}':
    get:
      operationId: 'swagger.controller.v2.ticket:findByTicketNumber'
      summary: 'Get a ticket'
      description: "Get ticket by number"
      security:
        - api_key: []
      parameters:
        - in: path
          name: ticketNumber
          required: true
          description: 'Ticket Number'
          pattern: 'T20\d{2}\.\d{2}\.\d{5}'
          type: string
      responses:
        200:
          $ref: '#/responses/TicketResponse'
        400:
          $ref: '#/responses/InputError'
        401:
          $ref: '#/responses/UnauthorizedError'
        404:
          $ref: '#/responses/EntityNotFoundError'
        500:
          $ref: '#/responses/ServerError'

definitions:
  TicketAttributes:
    type: object
    properties:
      id:
        type: integer
        format: int64
      status:
        enum: ['open', 'in-progress', 'closed']
        type: string
        default: 'open'
      title:
        type: string
        description: 'Ticket title'
      ticketNumber:
        type: string
        description: 'Ticket title'
      description:
        type: string
      status:
        type: integer
      type:
        type: string
        enum: ['question', 'incident', 'service-request', 'bug-report']
      priority:
        type: string
        enum: ['high', 'normal', 'low']
        default: 'normal'
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

  ExistingTicket:
    allOf:
      - required: [id, status, title, ticketNumber, description, status, type, priority, createdAt, updatedAt]
      - $ref: '#/definitions/TicketAttributes'

  Ticket:
    allOf:
      - required: [title, description, type]
      - $ref: '#/definitions/TicketAttributes'

  TicketCreationRequest:
    type: object
    properties:
      data:
        required: ['type', 'attributes']
        properties:
          type: { type: 'string', enum: ['ticket'] }
          attributes:
            $ref: '#/definitions/Ticket'

  TicketUpdateRequest:
    properties:
      data:
        required: ['id', 'type', 'attributes']
        properties:
          id: { type: string }
          type: { type: 'string', enum: ['ticket'] }
          attributes:
            $ref: '#/definitions/TicketAttributes'

  TicketReplaceRequest:
    type: object
    properties:
      data:
        required: ['type', 'attributes']
        properties:
          type: { type: 'string', enum: ['ticket'] }
          attributes:
            $ref: '#/definitions/ExistingTicket'

  JsonApiError:
    type: object
    properties:
      id: { type: string }
      status: { type: integer }
      code: { type: integer }
      title: { type: string }
      detail: { type: string }
      source:
        type: object
        properties:
          pointer: { type: string }
          parameter: { type: string }
      meta:
        type: object

  TicketSearchResult:
    type: object
    required: ['data', 'meta']
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/TicketResource'
      meta:
        properties:
          total: { type: 'integer', format: ['int64'] }

  TicketResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/TicketResource'

  TicketResource:
    type: object
    required: [id, 'type', 'attributes']
    properties:
      type: { type: 'string', enum: ['ticket'] }
      attributes:
        $ref: '#/definitions/ExistingTicket'

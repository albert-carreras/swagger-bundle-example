<?php declare(strict_types = 1);
/*
 * This file is part of the kleijnweb/swagger-bundle-example package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace KleijnWeb\Examples\SwaggerBundle\ServiceDeskBundle\Service\Entity;

use Doctrine\Bundle\DoctrineBundle\Registry as DoctrineRegistry;
use Doctrine\ORM\EntityManager;
use KleijnWeb\Examples\SwaggerBundle\ServiceDeskBundle\Entity\Ticket;

/**
 * @author John Kleijn <john@kleijnweb.nl>
 */
class TicketService
{
    /**
     * @var EntityManager
     */
    private $entityManager;

    /**
     * @var \Doctrine\ORM\EntityRepository
     */
    private $repository;

    /**
     * @param DoctrineRegistry              $registry
     */
    public function __construct(DoctrineRegistry $registry)
    {
        $this->entityManager        = $registry->getManagerForClass(Ticket::class);
        $this->repository           = $registry->getRepository(Ticket::class);
    }

    /**
     * @param string $status
     * @param string $title
     * @param string $description
     * @param string $type
     * @param string $priority
     *
     * @return array
     */
    public function search($status = null, $title = null, $description = null, $type = null, $priority = null)
    {
        $builder = $this->repository->createQueryBuilder('t');

        foreach (['status', 'type', 'priority'] as $field) {
            if (null !== $$field) {
                $builder->andWhere("t.$field = :$field");
                $builder->setParameter($field, $$field);
            }
        }
        foreach (['title', 'description'] as $field) {
            if (null !== $$field) {
                $builder->andWhere("t.$field LIKE :$field");
                $builder->setParameter($field, "%" . $$field . "%");
            }
        }

        return $builder->getQuery()->execute();
    }

    /**
     * @param Ticket $ticket
     * @param string $owner
     *
     * @return Ticket
     */
    public function create(Ticket $ticket, string $owner)
    {
        $ticket->setOwner($owner);

        $this->entityManager->persist($ticket);
        $this->entityManager->flush();
        // Flush a second time for the ticketNumber (which is based on the autogenerated ID)
        $this->entityManager->flush();

        return $ticket;
    }

    /**
     * @param Ticket $ticket
     *
     * @return Ticket
     */
    public function update(Ticket $ticket)
    {
        $this->entityManager->merge($ticket);
        $this->entityManager->flush();

        return $this->find($ticket->getId());
    }

    /**
     * @param int $id
     * @return bool
     */
    public function exists(int $id): bool
    {
        return (bool)$this->repository->createQueryBuilder('t')->select()->where('t.id = ?')->getQuery()->execute([$id]);
    }

    /**
     * @param integer $id
     *
     * @return null
     */
    public function deleteById($id)
    {
        $this->entityManager->remove($this->find($id));
        $this->entityManager->flush();

        return null;
    }

    /**
     * @param string $ticketNumber
     *
     * @return Ticket
     */
    public function findByTicketNumber($ticketNumber)
    {
        return $this->repository->findOneBy(['ticketNumber' => $ticketNumber]);
    }

    /**
     * @param integer $id
     *
     * @return Ticket
     */
    public function find($id)
    {
        return $this->repository->find($id);
    }
}
